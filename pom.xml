<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.lexmark.mps.example</groupId>
	<artifactId>mps-docker-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>mps-docker-demo</name>
	<description>Demo project for Spring Boot, Docker</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.2.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.13.0</version>

				<configuration>
					<images>
						<image>
							<alias>mps-docker-demo</alias>
							<name>zenchicken/mps-docker-demo:${project.version}</name>

							<build>
								<tags>
									<tag>latest</tag>
								</tags>
								<from>java:8</from>
								<maintainer>jsh@digitalmaelstrom.net</maintainer>
								<ports>
									<port>8080</port>
								</ports>
								<entryPoint>
									<shell>java -jar /maven/mps-docker-demo.jar</shell>
								</entryPoint>
                                <assembly descriptorRef="artifact" />
							</build>
						</image>

							<!-- Example multi-image builds, docker container linkage -->
							<!--
							<run>
								<ports>
									<port>tomcat.port:8080</port>
								</ports>
								<wait>
									<url>http://localhost:${tomcat.port}/access</url>
									<time>10000</time>
								</wait>
								<links>
									<link>database:db</link>
								</links>
							</run>
						</image>

						<image>
							<alias>database</alias>
							<name>postgres:9</name>
							<run>
								<wait>
									<log>database system is ready to accept connections</log>
									<time>20000</time>
								</wait>
							</run>
						</image>
                        -->
					</images>
				</configuration>

				<!-- Run Docker during integration tests -->
				<!--

				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
				-->
			</plugin>
		</plugins>
        <resources>
            <!-- regular resource processsing for everything except logback.xml -->
            <resource>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>scripts/</exclude>
                    <exclude>appspec.yml</exclude>
                </excludes>
            </resource>
            <!-- resource processsing with a different output directory
                 for logback.xml -->
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>scripts/</include>
                    <include>appspec.yml</include>
                </includes>
                <!-- relative to target/classes
                     i.e. ${project.build.outputDirectory} -->
                <targetPath>..</targetPath>
            </resource>
        </resources>
	</build>

</project>
